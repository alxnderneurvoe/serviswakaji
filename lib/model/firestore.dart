import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class Firestore {
  // just a simple get
  static Future<List<Users>> getAllEntries(String collection) async {
    return (await FirebaseFirestore.instance.collection(collection).get())
        .docs
        .map((item) => Users.fromMap(item.data()))
        .toList();
  }

  // get with custom order
  static Future<List<Users>> getAllEntriesSortedByName(
      String collection) async {
    return (await FirebaseFirestore.instance
            .collection(collection)
            .orderBy("manufacturer", descending: false)
            .get())
        .docs
        .map((item) => Users.fromMap(item.data()))
        .toList();
  }

  // get with filter
  static Future<List<Users>> getAllEntriesFilteredByPrice(
      String collection) async {
    return (await FirebaseFirestore.instance
            .collection(collection)
            .where("price", isGreaterThan: 60000)
            .get())
        .docs
        .map((item) => Users.fromMap(item.data()))
        .toList();
  }

  static Future addEntryWithAutogeneratedId(
      String collection, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance.collection(collection).add(data);
  }

  // updates an existing entry (missing fields won't be touched on update), document must exist
  static Future updateEntryWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .update(data);
  }

  // adds or updates an existing entry (missing fields will be deleted on update!), document will be created if needed
  static Future addOrUpdateWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .set(data);
  }

  // deletes the entry with the given document id
  static Future deleteEntry(String collection, String documentId) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .delete();
  }
}

class Users {
  Users({
    required this.nama,
    required this.nik,
    required this.alamat,
    required this.nohp,
  });

  final String nama;
  final String nik;
  final String alamat;
  final String nohp;

  factory Users.fromJson(String str) => Users.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Users.fromMap(Map<String, dynamic> json) => Users(
      nama: json["nama"],
      nik: json["nik"],
      alamat: json["alamat"],
      nohp: json["no hp"]);

  Map<String, dynamic> toMap() =>
      {"nama": nama, "nik": nik, "alamat": alamat, "no hp": nohp};

  @override
  String toString() {
    return "$nama ($alamat)";
  }
}

class GetStudentName extends StatelessWidget {
  final String documentId;

  const GetStudentName(this.documentId, {super.key});

  @override
  Widget build(BuildContext context) {
    CollectionReference user = FirebaseFirestore.instance.collection('User');

    return FutureBuilder<DocumentSnapshot>(
      //Fetching data from the documentId specified of the student
      future: user.doc(documentId).get(),
      builder:
          (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {
        //Error Handling conditions
        if (snapshot.hasError) {
          return const Text("Something went wrong");
        }

        if (snapshot.hasData && !snapshot.data!.exists) {
          return const Text("Document does not exist");
        }

        //Data is output to the user
        if (snapshot.connectionState == ConnectionState.done) {
          Map<String, dynamic> data =
              snapshot.data!.data() as Map<String, dynamic>;
          return Text("Full Name: ${data['full_name']} ${data['last_name']}");
        }

        return const Text("loading");
      },
    );
  }
}
